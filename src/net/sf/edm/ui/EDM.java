/*
 * EDM.java
 *
 * Created on July 31, 2008, 7:25 PM
 */
package net.sf.edm.ui;

import net.sf.edm.ui.diags.ClearDialog;
import net.sf.edm.ui.diags.DownloadDialog;
import net.sf.edm.ui.diags.PreferencesDialog;
import net.sf.edm.ui.diags.PropertiesDialog;
import java.awt.AWTException;
import java.awt.Desktop;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.sf.edm.DownloadEvent;
import net.sf.edm.DownloadState;
import net.sf.edm.HTTPDownload;
import net.sf.edm.ui.diags.RemoveDialog;

/**
 *
 * @author  usien
 */
public class EDM extends javax.swing.JFrame implements Observer {

    /** Creates new form EDM */
    public EDM() {
        mdl = new DownloadsModel();
        initComponents();
        mdl.readList(PreferencesManager.dnldLstFile);

        for (int idx = 0; idx < mdl.getDownloads().size(); idx++) {
            mdl.addDownloadObserver(idx, this);
        }

        DownloadDialog.addClipboardListener(this);

        if (SystemTray.isSupported()) {
            try {
                new TrayManager(this).addEDMTray();
            } catch (AWTException ex) {
                Logger.getLogger(EDM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        newButt = new javax.swing.JButton();
        cancelButt = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        pauseButt = new javax.swing.JButton();
        startButt = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        removeButt = new javax.swing.JButton();
        clearButt = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        propsButt = new javax.swing.JButton();
        prefButt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();

        setTitle("Express Download Manager 0.1 Beta"); // NOI18N
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/net/sf/edm/ui/icons/download.png")));

        jToolBar1.setRollover(true);

        newButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/new_window.png"))); // NOI18N
        newButt.setText("New Download"); // NOI18N
        newButt.setToolTipText("Add new download"); // NOI18N
        newButt.setFocusable(false);
        newButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        newButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtActionPerformed(evt);
            }
        });
        jToolBar1.add(newButt);

        cancelButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/button_cancel.png"))); // NOI18N
        cancelButt.setText("Cancel"); // NOI18N
        cancelButt.setToolTipText("Cancel selected download"); // NOI18N
        cancelButt.setEnabled(false);
        cancelButt.setFocusable(false);
        cancelButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cancelButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        cancelButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cancelButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtActionPerformed(evt);
            }
        });
        jToolBar1.add(cancelButt);
        jToolBar1.add(jSeparator1);

        pauseButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/agt_resume.png"))); // NOI18N
        pauseButt.setText("Pause"); // NOI18N
        pauseButt.setToolTipText("Pause selected download"); // NOI18N
        pauseButt.setEnabled(false);
        pauseButt.setFocusable(false);
        pauseButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pauseButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        pauseButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pauseButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtActionPerformed(evt);
            }
        });
        jToolBar1.add(pauseButt);

        startButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/redo.png"))); // NOI18N
        startButt.setText("Start"); // NOI18N
        startButt.setToolTipText("Start selected download"); // NOI18N
        startButt.setEnabled(false);
        startButt.setFocusable(false);
        startButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        startButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        startButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        startButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtActionPerformed(evt);
            }
        });
        jToolBar1.add(startButt);
        jToolBar1.add(jSeparator2);

        removeButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/edit_remove.png"))); // NOI18N
        removeButt.setText("Remove");
        removeButt.setToolTipText("Remove download from list");
        removeButt.setFocusable(false);
        removeButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        removeButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtActionPerformed(evt);
            }
        });
        jToolBar1.add(removeButt);

        clearButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/view_remove2.png"))); // NOI18N
        clearButt.setText("Clear List");
        clearButt.setToolTipText("Clear download list");
        clearButt.setFocusable(false);
        clearButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        clearButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtActionPerformed(evt);
            }
        });
        jToolBar1.add(clearButt);
        jToolBar1.add(jSeparator3);

        propsButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/info.png"))); // NOI18N
        propsButt.setText("Properties"); // NOI18N
        propsButt.setToolTipText("Show download properties");
        propsButt.setEnabled(false);
        propsButt.setFocusable(false);
        propsButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        propsButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        propsButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        propsButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propsButtActionPerformed(evt);
            }
        });
        jToolBar1.add(propsButt);

        prefButt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/sf/edm/ui/icons/configure.png"))); // NOI18N
        prefButt.setText("Preferences");
        prefButt.setToolTipText("Application Preferences");
        prefButt.setFocusable(false);
        prefButt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        prefButt.setMargin(new java.awt.Insets(0, 2, 0, 2));
        prefButt.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        prefButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefButtActionPerformed(evt);
            }
        });
        jToolBar1.add(prefButt);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        tbl.setModel(mdl);
        tbl.setFillsViewportHeight(true);
        tbl.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tbl.setRowHeight(45);
        tbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbl.setShowHorizontalLines(false);
        tbl.setShowVerticalLines(false);
        tbl.setDefaultRenderer(NameRenderer.class, new NameRenderer());
        tbl.setDefaultRenderer(ProgressRenderer.class, new ProgressRenderer());
        tbl.setDefaultRenderer(TimeRenderer.class, new TimeRenderer());
        tbl.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int row = tbl.getSelectedRow();
                checkButtonsStateForDownload(row);

            }
        });
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-685)/2, (screenSize.height-425)/2, 685, 425);
    }// </editor-fold>//GEN-END:initComponents

private void newButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtActionPerformed
    DownloadDialog diag = new DownloadDialog(this);
    diag.setVisible(true);
}//GEN-LAST:event_newButtActionPerformed

private void pauseButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtActionPerformed
    mdl.pauseAction(tbl.getSelectedRow());
    setButtonsState(true, false, true, false, true);
}//GEN-LAST:event_pauseButtActionPerformed

private void startButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtActionPerformed
    mdl.startAction(tbl.getSelectedRow());
    setButtonsState(true, true, false, false, true);
}//GEN-LAST:event_startButtActionPerformed

private void cancelButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtActionPerformed
    if (JOptionPane.showConfirmDialog(
            this, "Are your sure you want to cancel this download?", "Confirmation",
            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        mdl.cancelAction(tbl.getSelectedRow(), true);
        setButtonsState(false, false, false, false, false);
    }
}//GEN-LAST:event_cancelButtActionPerformed

private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
    if (evt.getClickCount() == 2) {
        if (Desktop.isDesktopSupported()) {
            int row = tbl.rowAtPoint(evt.getPoint());
            if (row >= 0) {
                HTTPDownload download = mdl.getDownload(row);
                if (download.getState() == DownloadState.COMPLETE && new File(download.getLocalFile()).exists()) {
                    try {
                        System.out.println("hlf:" + new File(download.getLocalFile()));
                        Desktop.getDesktop().open(new File(download.getLocalFile()));
                    } catch (IOException ex) {
                        Logger.getLogger(EDM.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "This feature is not supported on your system.");
        }
    }
}//GEN-LAST:event_tblMouseClicked

private void propsButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propsButtActionPerformed
    int row = tbl.getSelectedRow();

    if (row >= 0) {
        PropertiesDialog dialog = new PropertiesDialog(this, mdl.getDownload(row));
        dialog.setVisible(true);
    }
}//GEN-LAST:event_propsButtActionPerformed

private void prefButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prefButtActionPerformed
    new PreferencesDialog(this).setVisible(true);
}//GEN-LAST:event_prefButtActionPerformed

private void clearButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtActionPerformed
    ClearDialog diag = new ClearDialog(this);
    diag.setVisible(true);
}//GEN-LAST:event_clearButtActionPerformed

private void removeButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtActionPerformed
    new RemoveDialog(this, tbl.getSelectedRow()).setVisible(true);
}//GEN-LAST:event_removeButtActionPerformed

    private void setButtonsState(boolean... states) {
        cancelButt.setEnabled(states[0]);
        pauseButt.setEnabled(states[1]);
        startButt.setEnabled(states[2]);
        removeButt.setEnabled(states[3]);
        propsButt.setEnabled(states[4]);
    }

    private void checkButtonsStateForDownload(int index) {
        if (index >= 0) {
            HTTPDownload download = mdl.getDownload(index);

            switch (download.getState()) {
                case RUNNING:
                    setButtonsState(true, true, false, false, true);
                    break;
                case PAUSED:
                    setButtonsState(true, false, true, false, true);
                    break;
                case IDLE:
                    setButtonsState(true, false, true, false, true);
                    break;
                case CONNECTING:
                    setButtonsState(true, false, false, false, false);
                    break;
                case EXCEPTION:
                    setButtonsState(true, false, false, false, false);
                    break;
                default:
                    setButtonsState(false, false, false, true, true);
                    break;
            }
        } else {
            setButtonsState(false, false, false, false, false);
        }
    }

    public void update(Observable o, Object arg) {
        HTTPDownload download = (HTTPDownload) o;
        DownloadEvent event = (DownloadEvent) arg;
        int index = mdl.indexOf(download);

        if (tbl.getSelectedRow() == index) {
            checkButtonsStateForDownload(index);
        }

    /*if (event.isExceptionEvent()) {
    Exception exception = event.getException();
    exception.printStackTrace();
    
    if (exception instanceof HTTPException) {
    HTTPException httpException = (HTTPException) exception;
    if (httpException.getResponseCode() >= 400) {
    JOptionPane.showMessageDialog(this, "The download " + download.getFileName() + " does not exist", "Error", JOptionPane.ERROR_MESSAGE);
    mdl.cancelAction(index, true);
    }
    }
    }*/
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(PreferencesManager.lafMap.get(PreferencesManager.getLaf()));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EDM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(EDM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(EDM.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(EDM.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EDM().setVisible(true);
            }
        });
    }
    public static DownloadsModel mdl;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButt;
    private javax.swing.JButton clearButt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton newButt;
    private javax.swing.JButton pauseButt;
    private javax.swing.JButton prefButt;
    private javax.swing.JButton propsButt;
    private javax.swing.JButton removeButt;
    private javax.swing.JButton startButt;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
